{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","App","change","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAeeA,EAZF,SAACC,GAEV,OACA,sBAAKC,UAAY,iBAAjB,UACC,qBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACxB,mCAAOL,EAAMI,QAAQE,QACrB,kCAAMN,EAAMI,QAAQG,aCQVC,G,MAbE,SAACR,GAEd,OACI,qBAAKC,UAAY,YAAjB,SAEAD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCY7CM,G,MAPG,SAACX,GAEf,OACI,uBAAOC,UAAY,SAASW,KAAQZ,EAAMY,KAAMC,YAAeb,EAAMa,YAAaC,SAAUd,EAAMc,aCsB3FC,G,wDAjCb,aAAc,IAAD,8BACX,gBAcFC,OAAS,SAACC,GACP,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbvC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDASb,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO3C,WAEE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,KAAO,SAASC,YAAc,kBAAkBC,SAAUc,KAAKZ,SAC1E,cAAC,EAAD,CAAUP,SAAYoB,W,GA7BZI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ce6ff6fa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./css/Card.css\"\r\n\r\nconst Card = (props) => {\r\n    \r\n    return(\r\n    <div className = \"card-container\">\r\n     <img alt = \"monster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n     <h2> { props.monster.name }</h2>\r\n     <p> { props.monster.email }</p>\r\n    </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./css/CardList.css\";\r\n\r\nconst CardList = (props) => {\r\n\r\n    return(\r\n        <div className = \"card-list\">\r\n           {\r\n        props.monsters.map(monster => (<Card key = {monster.id} monster = {monster}/>\r\n            ))\r\n      }\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\nimport \"./css/SearchBox.css\";\r\n\r\n/* \r\n    //filtrování v search inputu\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n<input type = \"search\" placeholder = \"search monsters\" onChange={e => {this.setState({ searchField: e.target.value})\r\n      }\r\n      }/> \r\n      \r\n*/\r\n\r\nconst SearchBox = (props) => {\r\n\r\n    return(\r\n        <input className = \"search\" type = {props.type} placeholder = {props.placeholder} onChange={props.onChange} />\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n","import React, { Component } from \"react\";\nimport CardList from \"./components/CardList\";\nimport SearchBox from \"./components/SearchBox\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [ ],\n      searchField: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }))\n  }\n  \n  change = (e) => {\n    {this.setState({ searchField: e.target.value})}\n  }\n\n  render (){\n    //filtrování v search inputu\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox type = \"search\" placeholder = \"search monsters\" onChange={this.change}/> \n        <CardList monsters = {filteredMonsters} />\n    </div>\n  );\n    }}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}